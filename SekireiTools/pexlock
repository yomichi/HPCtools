#! /bin/sh

######################################################################
#
# PEXLOCK : A Exclusive Lock Command within POSIX
#
# Usage   : pexlock [options] <lockname> [lockname ...]
#           -d <lockdir> ...... the directory for lockfiles.
#                               The lockfile directory will be decided
#                               as the following rule.
#                               1) this option "-d" if specified
#                               2) the environment varriable "PLOCKDIR"
#                                  if specified
#                               3) if the environment varriable "TMPDIR"
#                                  specified, "$TMPDIR/plock.<username>"
#                               4) "/tmp/plock.<username>" (default)
#           -w <maxwaiting> ... maximum waiting seconds to succeed locking
#                               (-1 means waiting infinitely)
#                               The default value is 10.
# Return  : $?     ==0 ... one or more locking were success
#                  !=0 ... all failure
#           stdout ....... generated path of the lockfile
#
# Example : lockid=$(pexlock -d /tmp/plock -w 10 foo) || exit 1 # do ex-lock
#              :
#           (do something requires exclusive lock)
#              :
#           touch -c "$lockid"    # extend lifetime if you want
#              :                  # (but it needs to remain SUFFICIENT LIFETIME)
#           punlock "$lockid"                               # release the lock
#
# Notice  : The lockfile is written with rw-rw-rw for sharing.
#           If you want not to share it with others,
#           you have to give the lockdir rwxrwx--- or rwx------ permisson.
#
# Written by Rich Mikan (richmikan[at]richlab.org) at 2016/01/22
#
# This is a public-domain software. It measns that all of the people
# can use this with no restrictions at all. By the way, I am fed up
# the side effects which are broght about by the major licenses.
#
######################################################################


# ===== FUNCTIONS ====================================================

# --- FUNC: print the usage and exit ---------------------------------
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} [options] <lockname> [lockname ...]
	          -d <lockdir> ...... the directory for lockfiles.
	                              The lockfile directory will be decided
	                              as the following rule.
	                              1) this option "-d" if specified
	                              2) the environment varriable "PLOCKDIR"
	                                 if specified
	                              3) if the environment varriable "TMPDIR"
	                                 specified, "\$TMPDIR/plock.<username>"
	                              4) "/tmp/plock.<username>" (default)
	          -w <maxwaiting> ... maximum waiting seconds to succeed locking
	                              (-1 means waiting infinitely)
	                              The default value is 10.
	Version : Fri Jan 22 18:59:37 JST 2016
__USAGE
  exit 1
}



# ===== PREPARATION ==================================================

# --- initialize -----------------------------------------------------
set -u
PATH='/usr/bin:/bin'
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
export IFS LC_ALL=C LANG=C PATH
umask 0000

# --- parse the arguments --------------------------------------------
dopt=''
max_waiting_secs=10
max_lifetime_secs=''
ppid=$(ps -Ao pid,ppid | awk '$1=='"$$"'{print $2;exit}')
optmode=''
while [ $# -gt 0 ]; do
  case "$optmode" in
    '') case "$1" in
          --)      shift
                   break
                   ;;
          -[hv]|--help|--version)
                   print_usage_and_exit
                   ;;
          -[dwl]*) ret=$(printf '%s\n' "${1#-}"                              |
                         awk '{opt     = substr($0,1,1);                     #
                               opt_str = (length($0)>1) ? substr($0,2) : ""; #
                               printf("%s %s", opt, opt_str);              }')
                   ret1=${ret%% *}
                   ret2=${ret#* }
                   case "$ret1$ret2" in
                     d)  optmode='d'             ;;
                     d*) dopt=$ret2              ;;
                     w)  optmode='w'             ;;
                     w*) max_waiting_secs=$ret2  ;;
                     l)  optmode='l'             ;;
                     l*) max_lifetime_secs=$ret2 ;;
                   esac
                   ;;
          -*)      print_usage_and_exit
                   ;;
          *)       break
                   ;;
        esac
        ;;
    d)  dopt=$1
        optmode=''
        ;;
    w)  max_waiting_secs=$1
        optmode=''
        ;;
    l)  max_lifetime_secs=$1
        optmode=''
        ;;
  esac
  shift
done
case $# in 0) print_usage_and_exit;; esac
echo "_$max_waiting_secs"   | grep -Eq '^_-?[0-9]+$' || {
  printf '%s: Maximum waiting seconds parameter is invalid\n' "${0##*/}" 1>&2
  exit 1
}
case "$max_lifetime_secs" in
  '') :                                                                       ;;
   *) printf '%s: option "-l" could not use in this command\n' "${0##*/}" 1>&2;;
esac
Dir_lock=''
while :; do
  case "$dopt"         in '') :;; *) Dir_lock="${dopt%/}/"
                                     break                             ;; esac
  case "${PLOCKDIR:-}" in '') :;; *) Dir_lock="${PLOCKDIR%/}/"
                                     break                             ;; esac
  case "${TMPDIR:-}"   in '') :;; *) Dir_lock="${TMPDIR%/}/plock.$(id -un)/"
                                     mkdir -p "$Dir_lock" 2>/dev/null
                                     break                             ;; esac
  case 'default'       in         *) Dir_lock="/tmp/plock.$(id -un)/"
                                     mkdir -p "$Dir_lock" 2>/dev/null
                                     break                             ;; esac
done
case $? in
  [!0]*) echo "${0##*/}: Failed to make the lockfile directory" 1>&2;exit 1;;
esac
[ \( -z "$dopt" \) -o \( -d "$dopt" \) ] || {
  echo "${0##*/}: \"$Dir_lock\": No such directory or permission denied" 1>&2
  exit 1
}
case "$Dir_lock" in [!/]*) s=$(pwd);Dir_lock="${s%/}/$Dir_lock";; esac



# ===== MAIN =========================================================

count_all=0
count_success=0
for lockname in "$@"; do
  count_all=$((count_all+1))

  # --- Validate the lockname  ---------------------------------------
  case "$lockname" in '.border_date_and_time.tmp')
    printf '%s: ".border_date_and_time.tmp" is reserved, skipped\n' \
           "${0##*/}" 1>&2
    continue
    ;;
  esac
  echo "_$lockname" | grep -q '[/:]' && {
    printf '%s: "%s": Neither "/" nor ":" can be used in lockname, skipped\n' \
           "${0##*/}" "$lockname" 1>&2
    continue
  }

  # --- Try to set exclusive-lock ------------------------------------
  # 1) trying loop
  if [ $max_waiting_secs -ge 0 ]; then
    try=$((max_waiting_secs+1))
  else
    try=1
  fi
  while [ $try -gt 0 ]; do
    # 1-1) Try to create a file
    (set -C; echo $ppid >"$Dir_lock$lockname") 2>/dev/null || {
      [ $max_waiting_secs -ge 0 ] && try=$((try-1))   # retry if already exists
      case $try in 0) :;; *) sleep 1;; esac
      continue
    }
    # 1-2) finish the loop successfully
    break
  done
  # 2) $try > 0 : success and print the path of the generated lockfile
  #         ==0 : now fully locked
  #         < 0 : abnormally exit
  #    otherwise, it means some error happened
  case $try in
    [1-9]*) printf '%s%s\n' "$Dir_lock" "${lockname}"
            ;;
         0) printf '%s: "%s": timeout, try again later\n' \
                   "${0##*/}" "$lockname" 1>&2
            continue
            ;;
        -*) printf '%s: "%s": unexpedter error!\n' "${0##*/}" "$lockname" 1>&2
            continue
            ;;
  esac

  count_success=$((count_success+1))
done



# ===== FINISH =======================================================

# --- Return 1 if all locking failed ---------------------------------
case "$count_success:$count_all" in
  0:[!0]*) exit 1;;
        *) exit 0;;
esac
